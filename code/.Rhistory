group = clustering$cluster_index,
group_threshold = group_threshold
)
feature_string <- if (is.list(active) && !is.null(active$active_features)) {
paste(active$active_features, collapse = ", ")
} else {
paste(active, collapse = ", ")
}
group_string <- if (is.list(active) && !is.null(active$active_groups)) {
paste(active$active_groups, collapse = ", ")
} else {
NA_character_
}
summary_list[[treatment_name]] <- data.table(
treatment = treatment_name,
p_value = result$p_value,
test_statistic = result$test_statistic,
active_groups = group_string
)
}
summary_dt <- rbindlist(summary_list, use.names = TRUE)
print(summary_dt)
# Clean p-values and test statistics
summary_dt$p_value <- summary_dt$p_value.V1
summary_dt <- summary_dt[p_value < 0.05, ]
summary_dt$test_statistic <- summary_dt$test_statistic.V1
# ============================================
# Step 2: Expand active group list
# ============================================
summary_long <- summary_dt[, .(
group = unlist(strsplit(active_groups, ",\\s*")),
p_value = p_value
), by = treatment]
summary_long[, group := as.integer(group)]
summary_long <- summary_long[!is.na(group), ]
# ============================================
# Step 3: Compute group-level contribution scores
# ============================================
score_list <- vector("list", length(results_list))
for (treatment_name in names(results_list)) {
result <- results_list[[treatment_name]]
score_df <- compute_predictive_contributions(
result,
clustering$cluster_index,
group_threshold = group_threshold
)
score_df$treatment <- treatment_name
score_list[[treatment_name]] <- score_df
}
score_long <- rbindlist(score_list, use.names = TRUE)
# Ensure consistent types
score_long[, group := as.character(group)]
summary_long[, group := as.character(group)]
# ============================================
# Step 4: Merge contributions with p-values
# ============================================
summary_with_score <- merge(summary_long, score_long, by = c("treatment", "group"), all.x = TRUE)
print(summary_with_score)
# ============================================
# Step 5: Heatmap visualization
# ============================================
summary_with_score[, group := factor(group)]
ggplot(summary_with_score, aes(x = treatment, y = group, fill = score)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "red", na.value = "white",
name = "Predictive\nScore") +
labs(x = "Treatment", y = "Group", title = "Predictive Score Heatmap") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank()
)
# ============================================
# Step 6: Matrix + base heatmap
# ============================================
score_matrix <- reshape2::acast(
summary_with_score,
group ~ treatment,
value.var = "score"
)
score_matrix[is.na(score_matrix)] <- 0
score_matrix[is.infinite(score_matrix)] <- 0
heatmap(
score_matrix,
col = colorRampPalette(c("white", "red"))(100),
scale = "none",
na.rm = FALSE,
margins = c(8, 8),
main = "Clustering Heatmap of Predictive Scores"
)
# Step 1: Get clustered row and column orders from base::heatmap
hm <- heatmap(
score_matrix,
col = colorRampPalette(c("white", "red"))(100),
scale = "none",
na.rm = FALSE,
margins = c(8, 8),
main = "Clustering Heatmap of Predictive Scores"
)
row_order <- rownames(score_matrix)[hm$rowInd]
col_order <- colnames(score_matrix)[hm$colInd]
# Step 2: Convert matrix to long format
score_long_for_plot <- as.data.table(as.table(score_matrix))
colnames(score_long_for_plot) <- c("group", "treatment", "score")
# Step 3: Apply clustering order as factor levels
score_long_for_plot[, group := factor(group, levels = row_order)]
score_long_for_plot[, treatment := factor(treatment, levels = col_order)]
score_long_for_plot <- score_long_for_plot[group %in% row_order[1:16], ]
score_long_for_plot <- score_long_for_plot[treatment %in% col_order[1:25], ]
# Step 4: Plot using ggplot2
p1 <- ggplot(score_long_for_plot, aes(x = treatment, y = group, fill = score)) +
geom_tile(color = "#555555") +
scale_fill_gradient2(high = "#a65552", name = "Load. Conc.") +
labs(x = "Treatment", y = "Module Index"
# , title = "Active Gene Groups for Significant Perturbations"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 12),   # ðŸ‘ˆ Resize y-axis labels
axis.title = element_text(size = 16),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18, face = "bold")
)
dir.create(file.path(work_directory, "report/", batch_name), showWarnings = FALSE, recursive = TRUE)
ggsave(paste0(work_directory, "report/", batch_name, "/loading_contribution.pdf"),
width = 8, height = 6)
saveRDS(p1, paste0(work_directory, "report/", batch_name, "/loading_contribution.rds"))
library(ggplot2)
library(ggpubr)
rm(list = ls())
work_directory <- '/Users/tianyuzhang/Documents/SingleCell/code_paper/cleary_data_mean_comparison/'
plot_dir <- paste0(work_directory, '/report/31_GO_plot/')
GO_plt <- readRDS(paste0(plot_dir, 'GO_plot.rds'))
batch_name <- '11_all_groups_sparse'
heatmap_plt <- readRDS(paste0(work_directory, "report/", batch_name, "/loading_contribution.rds"))
# Modify GO_plt: add bigger side margins
GO_plt <- GO_plt + theme(
plot.margin = margin(t = 5, r = 80, b = 5, l = 80)  # Top, Right, Bottom, Left
)
# Now arrange
combined_plot <- ggarrange(heatmap_plt, GO_plt,
ncol = 1, nrow = 2,
labels = c('A', 'B'))
# View
combined_plot
plot_dir <- paste0(work_directory, '/report/41_paper_plot/')
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)
}
ggsave(paste0(plot_dir, "paper_plot.pdf"),
width = 12, height = 10)
library(ggplot2)
library(ggpubr)
rm(list = ls())
work_directory <- '/Users/tianyuzhang/Documents/SingleCell/code_paper/cleary_data_mean_comparison/'
plot_dir <- paste0(work_directory, '/report/31_GO_plot/')
GO_plt <- readRDS(paste0(plot_dir, 'GO_plot.rds'))
batch_name <- '11_all_groups_sparse'
heatmap_plt <- readRDS(paste0(work_directory, "report/", batch_name, "/loading_contribution.rds"))
# Modify GO_plt: add bigger side margins
GO_plt <- GO_plt + theme(
plot.margin = margin(t = 5, r = 80, b = 5, l = 80)  # Top, Right, Bottom, Left
)
# Now arrange
combined_plot <- ggarrange(heatmap_plt, GO_plt,
ncol = 1, nrow = 2,
labels = c('A', 'B'))
# View
combined_plot
plot_dir <- paste0(work_directory, '/report/41_paper_plot/')
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)
}
ggsave(paste0(plot_dir, "paper_plot.pdf"),
width = 11, height = 9)
ggsave(paste0(plot_dir, "loading_con_and_GO.pdf"),
width = 11, height = 9)
rm(list = ls())
library(data.table)
library(ggplot2)
work_directory <- '/Users/tianyuzhang/Documents/SingleCell/code_paper/cleary_data_mean_comparison/'
all_GO_result <- data.table()
for(module_index in c(15,31,37)){
GO_file <- paste0(work_directory, 'data/final/module_GO/module_', module_index,'.csv')
GO_result <- fread(GO_file)
GO_result[, module_index := module_index]
all_GO_result <- rbind(all_GO_result, GO_result)
}
GO_to_present <- c(###module 15
"signaling receptor binding",
"growth factor activity",
"cell-cell signaling",
"response to virus", ###module 31
"regulation of response to biotic stimulus",
"regulation of innate immune response",
"positive regulation of response to biotic stimulus",
"cytokine-mediated signaling pathway",
"response to chemokine", ##module 37
"leukocyte migration",
"cellular homeostasis",
"G protein-coupled receptor signaling pathway"
)
GO_result_plot <- all_GO_result[Description %in% GO_to_present, .(Description, module_index, p.adjust)]
GO_result_plot <- GO_result_plot[p.adjust < 0.05, ]
GO_result_plot[, module_index := as.factor(module_index)]
GO_result_plot[, Description := factor(Description, levels = unique(Description))]
library(ggplot2)
# Shorten the Description labels
GO_result_plot[, Short_Description := fcase(
Description == "signaling receptor binding", "Signaling receptor binding",
Description == "growth factor activity", "Growth factor activity",
Description == "cell-cell signaling", "Cell-cell signaling",
Description == "response to virus", "Response to virus",
Description == "regulation of response to biotic stimulus", "Response to biotic stimulus",
Description == "regulation of innate immune response", "Innate immune response",
Description == "positive regulation of response to biotic stimulus", "Response to biotic stimulus",
Description == "cytokine-mediated signaling pathway", "Cytokine-mediated pathway",
Description == "response to chemokine", "Chemokine response",
Description == "leukocyte migration", "Leukocyte migration",
Description == "cellular homeostasis", "Cell homeostasis",
Description == "G protein-coupled receptor signaling pathway", "GPCR signaling"
)]
# Make sure the new Short_Description factor follows original order
GO_result_plot[, Short_Description := factor(Short_Description, levels = unique(Short_Description))]
p1 <- ggplot(GO_result_plot) +
geom_point(aes(x = Short_Description, y = module_index, size = -log10(p.adjust)), color = "steelblue") +
scale_size_continuous(name = expression(-log[10]~"(GO p-value)")) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(size = 14, angle = 45, hjust = 1, vjust = 1),  # <-- bigger x-axis font
axis.text.y = element_text(size = 11),                                    # optional: make y-axis font nice too
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 11),
legend.position = "right"
) +
labs(
y = "Module Index"
# title = "GO Terms by Module"
)
plot_dir <- paste0(work_directory, '/report/31_GO_plot/')
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)
}
# Save the plot
ggsave(filename = paste0(plot_dir, 'GO_plot.pdf'),
plot = last_plot(),  # or you can put your ggplot object here
width = 8, height = 4.8)
saveRDS(p1, paste0(plot_dir, 'GO_plot.rds'))
library(ggplot2)
library(ggpubr)
rm(list = ls())
work_directory <- '/Users/tianyuzhang/Documents/SingleCell/code_paper/cleary_data_mean_comparison/'
plot_dir <- paste0(work_directory, '/report/31_GO_plot/')
GO_plt <- readRDS(paste0(plot_dir, 'GO_plot.rds'))
batch_name <- '11_all_groups_sparse'
heatmap_plt <- readRDS(paste0(work_directory, "report/", batch_name, "/loading_contribution.rds"))
# Modify GO_plt: add bigger side margins
GO_plt <- GO_plt + theme(
plot.margin = margin(t = 5, r = 80, b = 5, l = 80)  # Top, Right, Bottom, Left
)
# Now arrange
combined_plot <- ggarrange(heatmap_plt, GO_plt,
ncol = 1, nrow = 2,
labels = c('A', 'B'))
# View
combined_plot
plot_dir <- paste0(work_directory, '/report/41_paper_plot/')
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)
}
ggsave(paste0(plot_dir, "loading_con_and_GO.pdf"),
width = 11, height = 9)
all_GO_result
rm(list = ls())
library(data.table)
library(ggplot2)
work_directory <- '/Users/tianyuzhang/Documents/SingleCell/code_paper/cleary_data_mean_comparison/'
all_GO_result <- data.table()
for(module_index in c(15,31,37)){
GO_file <- paste0(work_directory, 'data/final/module_GO/module_', module_index,'.csv')
GO_result <- fread(GO_file)
GO_result[, module_index := module_index]
all_GO_result <- rbind(all_GO_result, GO_result)
}
GO_to_present <- c(###module 15
"signaling receptor binding",
"growth factor activity",
"cell-cell signaling",
"response to virus", ###module 31
"regulation of response to biotic stimulus",
"regulation of innate immune response",
"positive regulation of response to biotic stimulus",
"cytokine-mediated signaling pathway",
"response to chemokine", ##module 37
"leukocyte migration",
"cellular homeostasis",
"G protein-coupled receptor signaling pathway"
)
GO_result_plot <- all_GO_result[Description %in% GO_to_present, .(Description, module_index, p.adjust)]
GO_result_plot <- GO_result_plot[p.adjust < 0.05, ]
GO_result_plot[, module_index := as.factor(module_index)]
GO_result_plot[, Description := factor(Description, levels = unique(Description))]
library(ggplot2)
all_GO_result
GO_result_plot <- all_GO_result[Description %in% GO_to_present, .(Description, module_index, p.adjust, ID)]
GO_result_plot <- GO_result_plot[p.adjust < 0.05, ]
GO_result_plot[, module_index := as.factor(module_index)]
GO_result_plot[, Description := factor(Description, levels = unique(Description))]
# Shorten the Description labels
GO_result_plot[, Short_Description := fcase(
Description == "signaling receptor binding", "Signaling receptor binding",
Description == "growth factor activity", "Growth factor activity",
Description == "cell-cell signaling", "Cell-cell signaling",
Description == "response to virus", "Response to virus",
Description == "regulation of response to biotic stimulus", "Response to biotic stimulus",
Description == "regulation of innate immune response", "Innate immune response",
Description == "positive regulation of response to biotic stimulus", "Response to biotic stimulus",
Description == "cytokine-mediated signaling pathway", "Cytokine-mediated pathway",
Description == "response to chemokine", "Chemokine response",
Description == "leukocyte migration", "Leukocyte migration",
Description == "cellular homeostasis", "Cell homeostasis",
Description == "G protein-coupled receptor signaling pathway", "GPCR signaling"
)]
# Make sure the new Short_Description factor follows original order
GO_result_plot[, Short_Description := factor(Short_Description, levels = unique(Short_Description))]
GO_result_plot
# Select Short_Description and ID
table_data <- unique(GO_result_plot[, .(Short_Description, ID)])
# Start LaTeX table
cat("\\begin{table}[ht]\n")
cat("\\centering\n")
cat("\\begin{tabular}{ll}\n")
cat("\\hline\n")
cat("\\textbf{Short Description} & \\textbf{GO ID} \\\\\n")
cat("\\hline\n")
# Add each row
for (i in 1:nrow(table_data)) {
cat(paste0(table_data$Short_Description[i], " & ", table_data$ID[i], " \\\\\n"))
}
# End LaTeX table
cat("\\hline\n")
cat("\\end{tabular}\n")
cat("\\caption{Short descriptions and corresponding GO IDs.}\n")
cat("\\label{tab:short_desc_go_ids}\n")
cat("\\end{table}\n")
rm(list = ls())
library(data.table)
library(ggplot2)
work_directory <- '/Users/tianyuzhang/Documents/SingleCell/code_paper/cleary_data_mean_comparison/'
all_GO_result <- data.table()
for(module_index in c(15,31,37)){
GO_file <- paste0(work_directory, 'data/final/module_GO/module_', module_index,'.csv')
GO_result <- fread(GO_file)
GO_result[, module_index := module_index]
all_GO_result <- rbind(all_GO_result, GO_result)
}
GO_to_present <- c(###module 15
"signaling receptor binding",
"growth factor activity",
"cell-cell signaling",
"response to virus", ###module 31
"regulation of response to biotic stimulus",
"regulation of innate immune response",
"positive regulation of response to biotic stimulus",
"cytokine-mediated signaling pathway",
"response to chemokine", ##module 37
"leukocyte migration",
"cellular homeostasis",
"G protein-coupled receptor signaling pathway"
)
GO_result_plot <- all_GO_result[Description %in% GO_to_present, .(Description, module_index, p.adjust, ID)]
GO_result_plot <- GO_result_plot[p.adjust < 0.05, ]
GO_result_plot[, module_index := as.factor(module_index)]
GO_result_plot[, Description := factor(Description, levels = unique(Description))]
library(ggplot2)
# Shorten the Description labels
GO_result_plot[, Short_Description := fcase(
Description == "signaling receptor binding", "Signaling receptor binding",
Description == "growth factor activity", "Growth factor activity",
Description == "cell-cell signaling", "Cell-cell signaling",
Description == "response to virus", "Response to virus",
Description == "regulation of response to biotic stimulus", "Response to biotic stimulus",
Description == "regulation of innate immune response", "Innate immune response",
Description == "positive regulation of response to biotic stimulus", "Response to biotic stimulus",
Description == "cytokine-mediated signaling pathway", "Cytokine-mediated pathway",
Description == "response to chemokine", "Chemokine response",
Description == "leukocyte migration", "Leukocyte migration",
Description == "cellular homeostasis", "Cell homeostasis",
Description == "G protein-coupled receptor signaling pathway", "GPCR signaling"
)]
# Make sure the new Short_Description factor follows original order
GO_result_plot[, Short_Description := factor(Short_Description, levels = unique(Short_Description))]
p1 <- ggplot(GO_result_plot) +
geom_point(aes(x = Short_Description, y = module_index, size = -log10(p.adjust)), color = "steelblue") +
scale_size_continuous(name = expression(-log[10]~"(GO p-value)")) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(size = 14, angle = 45, hjust = 1, vjust = 1),  # <-- bigger x-axis font
axis.text.y = element_text(size = 11),                                    # optional: make y-axis font nice too
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.text = element_text(size = 10),
legend.title = element_text(size = 11),
legend.position = "right"
) +
labs(
y = "Module Index"
# title = "GO Terms by Module"
)
plot_dir <- paste0(work_directory, '/report/31_GO_plot/')
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)
}
# Save the plot
ggsave(filename = paste0(plot_dir, 'GO_plot.pdf'),
plot = last_plot(),  # or you can put your ggplot object here
width = 8, height = 4.8)
saveRDS(p1, paste0(plot_dir, 'GO_plot.rds'))
# Select Short_Description and ID
table_data <- unique(GO_result_plot[, .(Short_Description, ID)])
# Start LaTeX table
cat("\\begin{table}[ht]\n")
cat("\\centering\n")
cat("\\begin{tabular}{ll}\n")
cat("\\hline\n")
cat("\\textbf{Short Description} & \\textbf{GO ID} \\\\\n")
cat("\\hline\n")
# Add each row
for (i in 1:nrow(table_data)) {
cat(paste0(table_data$Short_Description[i], " & ", table_data$ID[i], " \\\\\n"))
}
# End LaTeX table
cat("\\hline\n")
cat("\\end{tabular}\n")
cat("\\caption{Short descriptions and corresponding GO IDs.}\n")
cat("\\label{tab:short_desc_go_ids}\n")
cat("\\end{table}\n")
# Select the columns
table_data <- unique(GO_result_plot[, .(Short_Description, ID)])
# Create a vector to store each line
latex_lines <- c()
# Add beginning of table
latex_lines <- c(latex_lines, "\\begin{table}[ht]")
latex_lines <- c(latex_lines, "\\centering")
latex_lines <- c(latex_lines, "\\begin{tabular}{ll}")
latex_lines <- c(latex_lines, "\\hline")
latex_lines <- c(latex_lines, "\\textbf{Short Description} & \\textbf{GO ID} \\\\")
latex_lines <- c(latex_lines, "\\hline")
# Add table rows
for (i in 1:nrow(table_data)) {
latex_lines <- c(latex_lines, paste0(table_data$Short_Description[i], " & ", table_data$ID[i], " \\\\"))
}
# End table
latex_lines <- c(latex_lines, "\\hline")
latex_lines <- c(latex_lines, "\\end{tabular}")
latex_lines <- c(latex_lines, "\\caption{Short descriptions and corresponding GO IDs.}")
latex_lines <- c(latex_lines, "\\label{tab:short_desc_go_ids}")
latex_lines <- c(latex_lines, "\\end{table}")
# Now output all at once
cat(paste(latex_lines, collapse = "\n"))
# Select the columns
table_data <- unique(GO_result_plot[, .(Short_Description, ID)])
# Create a vector to store each line
latex_lines <- c()
# Begin table with small font and booktabs
latex_lines <- c(latex_lines, "\\begin{table}[ht]")
latex_lines <- c(latex_lines, "\\centering")
latex_lines <- c(latex_lines, "\\small")  # Make table font slightly smaller
latex_lines <- c(latex_lines, "\\begin{tabular}{lp{5cm}}")  # left-align Short_Description, and set GO ID column wider
latex_lines <- c(latex_lines, "\\toprule")
latex_lines <- c(latex_lines, "\\textbf{Short Description} & \\textbf{GO ID} \\\\")
latex_lines <- c(latex_lines, "\\midrule")
# Add table rows
for (i in 1:nrow(table_data)) {
latex_lines <- c(latex_lines, paste0(table_data$Short_Description[i], " & ", table_data$ID[i], " \\\\"))
}
# End table
latex_lines <- c(latex_lines, "\\bottomrule")
latex_lines <- c(latex_lines, "\\end{tabular}")
latex_lines <- c(latex_lines, "\\caption{Short descriptions and corresponding GO IDs.}")
latex_lines <- c(latex_lines, "\\label{tab:short_desc_go_ids}")
latex_lines <- c(latex_lines, "\\end{table}")
# Output all at once
cat(paste(latex_lines, collapse = "\n"))
# Select the columns
table_data <- unique(GO_result_plot[, .(Short_Description, ID)])
# Create a vector to store each line
latex_lines <- c()
# Add beginning of table
latex_lines <- c(latex_lines, "\\begin{table}[ht]")
latex_lines <- c(latex_lines, "\\centering")
latex_lines <- c(latex_lines, "\\begin{tabular}{ll}")
latex_lines <- c(latex_lines, "\\hline")
latex_lines <- c(latex_lines, "\\textbf{Short Description} & \\textbf{GO ID} \\\\")
latex_lines <- c(latex_lines, "\\hline")
# Add table rows
for (i in 1:nrow(table_data)) {
latex_lines <- c(latex_lines, paste0(table_data$Short_Description[i], " & ", table_data$ID[i], " \\\\"))
}
# End table
latex_lines <- c(latex_lines, "\\hline")
latex_lines <- c(latex_lines, "\\end{tabular}")
latex_lines <- c(latex_lines, "\\caption{Short descriptions and corresponding GO IDs.}")
latex_lines <- c(latex_lines, "\\label{tab:short_desc_go_ids}")
latex_lines <- c(latex_lines, "\\end{table}")
# Now output all at once
cat(paste(latex_lines, collapse = "\n"))
