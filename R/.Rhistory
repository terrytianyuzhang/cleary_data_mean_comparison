col_fun <- c("0" = "white", "1" = "red")
# Optional: Annotate with number of significant treatments per group
row_anno <- rowAnnotation(
Sig_Count = rowSums(binary_matrix),
col = list(Sig_Count = colorRamp2(c(0, max(rowSums(binary_matrix))), c("grey90", "black")))
)
# Optional: Annotate with number of significant groups per treatment
col_anno <- HeatmapAnnotation(
Sig_Count = colSums(binary_matrix),
col = list(Sig_Count = colorRamp2(c(0, max(colSums(binary_matrix))), c("grey90", "black")))
)
# Draw the heatmap
# Create a background annotation for alternating row stripes
stripe_colors <- rep(c("white", "grey95"), length.out = nrow(binary_matrix))
row_stripe_anno <- rowAnnotation(
bg = anno_simple(stripe_colors, col = setNames(stripe_colors, stripe_colors)),
width = unit(2, "mm")
)
# Combine stripe annotation and heatmap
ht <- Heatmap(
binary_matrix,
name = "Significant",
col = c("0" = "white", "1" = "red"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_rot = 45,
row_title = "Groups",
column_title = "Treatments",
top_annotation = col_anno,
right_annotation = row_anno,
heatmap_legend_param = list(
at = c(0, 1),
labels = c("Not Sig", "Sig"),
color_bar = "discrete"
),
border = TRUE
)
# Draw with left annotation as background
draw(row_stripe_anno + ht, heatmap_legend_side = "right")
ht_drawn <- draw(ht, heatmap_legend_side = "right")
row_order <- row_order(ht_drawn)
col_order <- column_order(ht_drawn)
# Reorder matrix accordingly
binary_matrix_clustered <- binary_matrix[row_order[[1]], col_order[[1]]]
binary_matrix_clustered
row_order <- row_order(ht_drawn)
ht_drawn <- draw(row_stripe_anno + ht, heatmap_legend_side = "right")
row_order <- row_order(ht_drawn)
col_order <- column_order(ht_drawn)
# Reorder matrix accordingly
binary_matrix_clustered <- binary_matrix[row_order[[1]], col_order[[1]]]
binary_matrix_clustered
col_order
# Reorder matrix accordingly
binary_matrix_clustered <- binary_matrix[row_order, col_order]
binary_matrix_clustered
Heatmap(
binary_matrix_clustered,
name = "Significant",
col = c("0" = "white", "1" = "red"),
cluster_rows = FALSE,   # Already clustered
cluster_columns = FALSE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_rot = 45,
row_title = "Groups",
column_title = "Treatments",
heatmap_legend_param = list(
at = c(0, 1),
labels = c("Not Sig", "Sig"),
color_bar = "discrete"
),
border = TRUE
)
row_anno_new <- rowAnnotation(
Sig_Count = rowSums(binary_matrix_clustered),
col = list(Sig_Count = colorRamp2(c(0, max(rowSums(binary_matrix_clustered))), c("grey90", "black")))
)
col_anno_new <- HeatmapAnnotation(
Sig_Count = colSums(binary_matrix_clustered),
col = list(Sig_Count = colorRamp2(c(0, max(colSums(binary_matrix_clustered))), c("grey90", "black")))
)
draw(row_anno_new + Heatmap(...), top_annotation = col_anno_new)
Heatmap(
binary_matrix_clustered,
name = "Significant",
col = c("0" = "white", "1" = "red"),
cluster_rows = FALSE,   # Already clustered
cluster_columns = FALSE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_rot = 45,
row_title = "Groups",
column_title = "Treatments",
heatmap_legend_param = list(
at = c(0, 1),
labels = c("Not Sig", "Sig"),
color_bar = "discrete"
),
border = TRUE
)
rm(list = ls())
library(data.table)
library(glue)
library(ggplot2)
library(tidyr)
library(dplyr)
data_directory <- '/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/'
# work_directory <- '/raid6/Tianyu/SingleCell/cleary_data_mean_comparison/'
source(glue('{data_directory}R/convergence.R'))
work_directory <- '/Users/tianyuzhang/Documents/SingleCell/code_paper/cleary_data_mean_comparison/'
batch_name <- '11_all_groups'
# Define target folder
result_folder <- glue('{work_directory}data/intermediate/{batch_name}/')
# Get all .rds files in the folder
result_files <- list.files(result_folder, pattern = "\\.rds$", full.names = TRUE)
results_list <- lapply(result_files, readRDS)
names(results_list) <- gsub("\\.rds$", "", basename(result_files))
clustering_file <- glue("{data_directory}data/module_list_df_2000_genes.csv")
clustering <- fread(clustering_file)
clustering$gene_name <- gsub("\\.", "-", clustering$gene_name)
# Initialize storage
summary_list <- vector("list", length(results_list))
# Loop over treatments
for (treatment_name in names(results_list)) {
result <- results_list[[treatment_name]]
active <- collect_active_features(result,
group = clustering$cluster_index,
group_threshold = 5)
# Convert active features to comma-separated string
feature_string <- if (is.list(active) && !is.null(active$active_features)) {
paste(active$active_features, collapse = ", ")
} else {
paste(active, collapse = ", ")
}
# Convert active groups to comma-separated string
group_string <- if (is.list(active) && !is.null(active$active_groups)) {
paste(active$active_groups, collapse = ", ")
} else {
NA_character_
}
# Store result
summary_list[[treatment_name]] <- data.table(
treatment = treatment_name,
p_value = result$p_value,
test_statistic = result$test_statistic,
active_features = feature_string,
active_groups = group_string
)
}
rm(list = ls())
library(data.table)
library(glue)
library(ggplot2)
library(tidyr)
library(dplyr)
data_directory <- '/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/'
# work_directory <- '/raid6/Tianyu/SingleCell/cleary_data_mean_comparison/'
source(glue('{data_directory}R/convergence.R'))
work_directory <- '/Users/tianyuzhang/Documents/SingleCell/code_paper/cleary_data_mean_comparison/'
batch_name <- '11_all_groups'
# Define target folder
result_folder <- glue('{work_directory}data/intermediate/{batch_name}/')
# Get all .rds files in the folder
result_files <- list.files(result_folder, pattern = "\\.rds$", full.names = TRUE)
results_list <- lapply(result_files, readRDS)
names(results_list) <- gsub("\\.rds$", "", basename(result_files))
clustering_file <- glue("{data_directory}data/module_list_df_2000_genes.csv")
clustering <- fread(clustering_file)
clustering$gene_name <- gsub("\\.", "-", clustering$gene_name)
# Initialize storage
summary_list <- vector("list", length(results_list))
# Loop over treatments
for (treatment_name in names(results_list)) {
result <- results_list[[treatment_name]]
active <- collect_active_features(result,
group = clustering$cluster_index,
group_threshold = 1)
# Convert active features to comma-separated string
feature_string <- if (is.list(active) && !is.null(active$active_features)) {
paste(active$active_features, collapse = ", ")
} else {
paste(active, collapse = ", ")
}
# Convert active groups to comma-separated string
group_string <- if (is.list(active) && !is.null(active$active_groups)) {
paste(active$active_groups, collapse = ", ")
} else {
NA_character_
}
# Store result
summary_list[[treatment_name]] <- data.table(
treatment = treatment_name,
p_value = result$p_value,
test_statistic = result$test_statistic,
active_features = feature_string,
active_groups = group_string
)
}
# Combine into one data.table
summary_dt <- rbindlist(summary_list, use.names = TRUE)
# View
print(summary_dt)
# Assume summary_dt is your current result table
summary_dt$p_value <- summary_dt$p_value.V1
summary_dt$test_statistic <- summary_dt$test_statistic.V1
# Step 1: expand the active group list
summary_long <- summary_dt[, .(
group = unlist(strsplit(active_groups, ",\\s*")),
p_value = p_value
), by = treatment]
# Step 2: convert group to integer (optional)
summary_long[, group := as.integer(group)]
# Step 3: Determine significance
num_treatments <- length(unique(summary_long$treatment))
alpha <- 0.05
summary_long[, sig_flag := p_value < alpha]
summary_long <- summary_long[!is.na(group), ]
# Keep only treatments that have at least one TRUE in sig_flag
summary_long_filtered <- summary_long[
treatment %in% summary_long[sig_flag == TRUE, unique(treatment)]
]
library(ComplexHeatmap)
library(data.table)
library(dplyr)
library(tidyr)
library(circlize)
# Create wide binary matrix
binary_matrix_dt <- dcast(summary_long_filtered, group ~ treatment, value.var = "sig_flag", fill = FALSE)
rownames(binary_matrix_dt) <- binary_matrix_dt$group
binary_matrix_dt[, group := NULL]
# Convert logical to numeric
binary_matrix <- as.matrix(binary_matrix_dt * 1)
# Define custom color mapping: 0 = white, 1 = red
col_fun <- c("0" = "white", "1" = "red")
# Optional: Annotate with number of significant treatments per group
row_anno <- rowAnnotation(
Sig_Count = rowSums(binary_matrix),
col = list(Sig_Count = colorRamp2(c(0, max(rowSums(binary_matrix))), c("grey90", "black")))
)
# Optional: Annotate with number of significant groups per treatment
col_anno <- HeatmapAnnotation(
Sig_Count = colSums(binary_matrix),
col = list(Sig_Count = colorRamp2(c(0, max(colSums(binary_matrix))), c("grey90", "black")))
)
# Draw the heatmap
# Create a background annotation for alternating row stripes
stripe_colors <- rep(c("white", "grey95"), length.out = nrow(binary_matrix))
row_stripe_anno <- rowAnnotation(
bg = anno_simple(stripe_colors, col = setNames(stripe_colors, stripe_colors)),
width = unit(2, "mm")
)
# Combine stripe annotation and heatmap
ht <- Heatmap(
binary_matrix,
name = "Significant",
col = c("0" = "white", "1" = "red"),
cluster_rows = TRUE,
cluster_columns = TRUE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_rot = 45,
row_title = "Groups",
column_title = "Treatments",
top_annotation = col_anno,
right_annotation = row_anno,
heatmap_legend_param = list(
at = c(0, 1),
labels = c("Not Sig", "Sig"),
color_bar = "discrete"
),
border = TRUE
)
# Draw with left annotation as background
draw(row_stripe_anno + ht, heatmap_legend_side = "right")
ht_drawn <- draw(row_stripe_anno + ht, heatmap_legend_side = "right")
row_order <- row_order(ht_drawn)
col_order <- column_order(ht_drawn)
# Reorder matrix accordingly
binary_matrix_clustered <- binary_matrix[row_order, col_order]
Heatmap(
binary_matrix_clustered,
name = "Significant",
col = c("0" = "white", "1" = "red"),
cluster_rows = FALSE,   # Already clustered
cluster_columns = FALSE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_rot = 45,
row_title = "Groups",
column_title = "Treatments",
heatmap_legend_param = list(
at = c(0, 1),
labels = c("Not Sig", "Sig"),
color_bar = "discrete"
),
border = TRUE
)
# Step 4: Cast to wide format (keep significance flag instead of log10_p)
heatmap_data <- dcast(
summary_long,
group ~ treatment,
value.var = "sig_flag",
fill = FALSE
)
# Step 5: Melt back to long format for plotting
heatmap_long <- melt(
heatmap_data,
id.vars = "group",
variable.name = "treatment",
value.name = "sig_flag"
)
# Count the number of significant hits per group and treatment
group_order <- heatmap_long[, .(sig_count = sum(sig_flag)), by = group][
order(-sig_count), group]
treatment_order <- heatmap_long[, .(sig_count = sum(sig_flag)), by = treatment][
order(-sig_count), treatment]
# Add numeric indices for plotting
heatmap_long[, row_id := as.integer(factor(group, levels = group_order))]
heatmap_long[, col_id := as.integer(factor(treatment, levels = treatment_order))]
# Create background rectangles (striped pattern)
row_stripes <- data.table(row_id = seq_len(length(group_order)))[row_id %% 2 == 1]
col_stripes <- data.table(col_id = seq_len(length(treatment_order)))[col_id %% 2 == 1]
# Main plot
ggplot() +
# Row stripes
geom_tile(data = row_stripes,
aes(x = mean(heatmap_long$col_id), y = row_id),
fill = "grey95", width = max(heatmap_long$col_id) + 1, height = 1) +
# Column stripes
geom_tile(data = col_stripes,
aes(x = col_id, y = mean(heatmap_long$row_id)),
fill = "grey95", width = 1, height = max(heatmap_long$row_id) + 1) +
# Main heatmap tiles
geom_tile(data = heatmap_long,
aes(x = col_id, y = row_id, fill = sig_flag),
color = "white") +
scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "white"), name = "Significant") +
scale_x_continuous(breaks = heatmap_long[, .(col_id = unique(col_id), label = unique(treatment))][, col_id],
labels = heatmap_long[, .(col_id = unique(col_id), label = unique(treatment))][, label]) +
scale_y_continuous(breaks = heatmap_long[, .(row_id = unique(row_id), label = unique(group))][, row_id],
labels = heatmap_long[, .(row_id = unique(row_id), label = unique(group))][, label]) +
labs(x = "Treatment", y = "Active Group", title = "Significant Groups by Treatment") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
result
result$fold_data[[1]]$proj_direction
plot(result$fold_data[[1]]$proj_direction)
plot(result$fold_data[[1]]$leanding_pc)
plot(result$fold_data[[1]]$classifier_coef)
rm(list = ls())
# Load required packages
library(MASS)       # For mvrnorm
library(PMA)        # For sparse PCA
library(irlba)      # For dense PCA
library(Matrix)     # For norm
work_directory <- '/Users/tianyuzhang/Documents/SingleCell/code_paper/cleary_data_mean_comparison/'
source('/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/R/convergence.R')
source(glue("{work_directory}R/anchored_lasso.R"))
# ------- Simulate low-rank signal in mean difference -------
simulate_pca_shift_data <- function(n_control = 100, n_treatment = 100,
p = 50, signal_strength = 1.5,
shift_rank = 1, rho = 0.6) {
# Create block-correlated covariance matrix
Sigma <- outer(1:p, 1:p, function(i, j) rho^abs(i - j))
# Generate a low-rank mean shift (in the first few directions)
U <- matrix(rnorm(p * shift_rank), p, shift_rank)
U <- apply(U, 2, function(u) u / sqrt(sum(u^2)))  # orthonormalize
mu_diff <- signal_strength * U[,1]
# Generate samples
control <- mvrnorm(n_control, mu = rep(0, p), Sigma = Sigma)
treatment <- mvrnorm(n_treatment, mu = mu_diff, Sigma = Sigma)
list(control = control, treatment = treatment, mu_diff = mu_diff)
}
rm(list = ls())
# Load required packages
library(MASS)       # For mvrnorm
library(PMA)        # For sparse PCA
library(irlba)      # For dense PCA
library(Matrix)     # For norm
work_directory <- '/Users/tianyuzhang/Documents/SingleCell/code_paper/cleary_data_mean_comparison/'
source('/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/R/convergence.R')
source(glue("{work_directory}R/anchored_lasso.R"))
# ------- Simulate low-rank signal in mean difference -------
simulate_pca_shift_data <- function(n_control = 100, n_treatment = 100,
p = 50, signal_strength = 1.5,
shift_rank = 1, rho = 0.6) {
# Create block-correlated covariance matrix
Sigma <- outer(1:p, 1:p, function(i, j) rho^abs(i - j))
# Generate a low-rank mean shift (in the first few directions)
U <- matrix(rnorm(p * shift_rank), p, shift_rank)
U <- apply(U, 2, function(u) u / sqrt(sum(u^2)))  # orthonormalize
mu_diff <- signal_strength * U[,1]
# Generate samples
control <- mvrnorm(n_control, mu = rep(0, p), Sigma = Sigma)
treatment <- mvrnorm(n_treatment, mu = mu_diff, Sigma = Sigma)
list(control = control, treatment = treatment, mu_diff = mu_diff)
}
# Simulate
sim_data <- simulate_pca_shift_data()
# Dense PCA test
result_dense <- mean_comparison_anchor(
control = sim_data$control,
treatment = sim_data$treatment,
pca_method = "dense_pca",
classifier_method = "lasso",
lambda_type = "lambda.min",
n_folds = 5,
verbose = TRUE
)
sim_data
sim_data$control
sim_data$treatment
# Dense PCA test
result_dense <- mean_comparison_anchor(
control = sim_data$control,
treatment = sim_data$treatment,
pca_method = "dense_pca",
classifier_method = "lasso",
lambda_type = "lambda.min",
n_folds = 5,
verbose = TRUE
)
rm(list = ls())
# Load required packages
library(MASS)       # For mvrnorm
library(PMA)        # For sparse PCA
library(irlba)      # For dense PCA
library(Matrix)     # For norm
work_directory <- '/Users/tianyuzhang/Documents/SingleCell/code_paper/cleary_data_mean_comparison/'
source('/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/R/convergence.R')
source(glue("{work_directory}R/anchored_lasso.R"))
# ------- Simulate low-rank signal in mean difference -------
simulate_pca_shift_data <- function(n_control = 100, n_treatment = 100,
p = 50, signal_strength = 1.5,
shift_rank = 1, rho = 0.6) {
# Create block-correlated covariance matrix
Sigma <- outer(1:p, 1:p, function(i, j) rho^abs(i - j))
# Generate a low-rank mean shift (in the first few directions)
U <- matrix(rnorm(p * shift_rank), p, shift_rank)
U <- apply(U, 2, function(u) u / sqrt(sum(u^2)))  # orthonormalize
mu_diff <- signal_strength * U[,1]
# Generate samples
control <- MASS::mvrnorm(n_control, mu = rep(0, p), Sigma = Sigma)
treatment <- MASS::mvrnorm(n_treatment, mu = mu_diff, Sigma = Sigma)
# Assign column names
col_names <- paste0("gene_", seq_len(p))
colnames(control) <- col_names
colnames(treatment) <- col_names
list(control = control, treatment = treatment, mu_diff = mu_diff)
}
# Simulate
sim_data <- simulate_pca_shift_data()
# Dense PCA test
result_dense <- mean_comparison_anchor(
control = sim_data$control,
treatment = sim_data$treatment,
pca_method = "dense_pca",
classifier_method = "lasso",
lambda_type = "lambda.min",
n_folds = 5,
verbose = TRUE
)
# Sparse PCA test
result_sparse <- mean_comparison_anchor(
control = sim_data$control,
treatment = sim_data$treatment,
pca_method = "sparse_pca",
classifier_method = "lasso",
lambda_type = "lambda.min",
n_folds = 5,
verbose = TRUE
)
cat("\n--- Dense PCA ---\n")
print(result_dense$p_value)
cat("\n--- Sparse PCA ---\n")
print(result_sparse$p_value)
plot(result_dense$fold_data[[1]]$leading_pc)
plot(result_sparse$fold_data[[1]]$leading_pc)
rm(list = ls())
library(data.table)
library(glue)
library(ggplot2)
library(tidyr)
library(dplyr)
data_directory <- '/Users/tianyuzhang/Documents/convergence_risk_gene/try_Cleary_data/'
# work_directory <- '/raid6/Tianyu/SingleCell/cleary_data_mean_comparison/'
source(glue('{data_directory}R/convergence.R'))
work_directory <- '/Users/tianyuzhang/Documents/SingleCell/code_paper/cleary_data_mean_comparison/'
batch_name <- '11_all_groups'
# Define target folder
result_folder <- glue('{work_directory}data/intermediate/{batch_name}/')
# Get all .rds files in the folder
result_files <- list.files(result_folder, pattern = "\\.rds$", full.names = TRUE)
results_list <- lapply(result_files, readRDS)
names(results_list) <- gsub("\\.rds$", "", basename(result_files))
clustering_file <- glue("{data_directory}data/module_list_df_2000_genes.csv")
clustering <- fread(clustering_file)
clustering$gene_name <- gsub("\\.", "-", clustering$gene_name)
# Initialize storage
summary_list <- vector("list", length(results_list))
treatment_name <- 'STAT1'
result <- results_list[[treatment_name]]
active <- collect_active_features(result,
group = clustering$cluster_index,
group_threshold = 1)
result
plot(result$fold_data[[1]]$leanding_pc)
plot(result$fold_data[[1]]$classifier_coef)
plot(result$fold_data[[1]]$proj_direction)
